// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                     String     @id @default(cuid())
    name                   String?
    email                  String?    @unique
    emailVerified          DateTime?
    image                  String?
    isAdmin                Boolean    @default(false)
    accounts               Account[]
    sessions               Session[]
    exchangesParticipating Exchange[] @relation("exchangeParticipant")
    exchangesCreated       Exchange[] @relation("exchangeCreator")
    giftsRequested         Gift[]     @relation("giftRequestor")
    purchases              Purchase[] @relation("giftPurchaser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exchange {
    id           Int      @id @default(autoincrement())
    name         String
    slug         String   @unique @default(cuid())
    description  String
    participants User[]   @relation("exchangeParticipant")
    creator      User     @relation("exchangeCreator", fields: [creatorId], references: [id])
    creatorId    String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    gifts        Gift[]

    @@index([creatorId])
}

model Gift {
    id          Int        @id @default(autoincrement())
    name        String
    description String
    image       String?    @default("") @db.VarChar(1000)
    url         String?    @default("") @db.VarChar(1000)
    price       Float?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    exchange    Exchange   @relation(fields: [exchangeId], references: [id])
    exchangeId  Int
    requestor   User       @relation("giftRequestor", fields: [requestorId], references: [id])
    requestorId String
    purchase    Purchase[]

    @@index([exchangeId])
    @@index([requestorId])
}

model Purchase {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    gift       Gift     @relation(fields: [giftId], references: [id])
    giftId     Int      @unique
    purchasers User[]   @relation("giftPurchaser")

    @@index([giftId])
}
