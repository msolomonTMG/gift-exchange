// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                                 String                    @id @default(cuid())
    name                               String?
    email                              String?                   @unique
    emailVerified                      DateTime?
    image                              String?
    isAdmin                            Boolean                   @default(false)
    accounts                           Account[]
    sessions                           Session[]
    departmentStageApprover            DepartmentStageApprover[]
    departmentParticipant              Department[]              @relation("departmentParticipant")
    departmentRecruiter                Department[]              @relation("departmentRecruiter")
    requestComment                     RequestComment[]
    requestCreated                     Request[]                 @relation("creator")
    requestCurrentApprover             Request[]                 @relation("approver")
    requestEventActioned               RequestEvent[]
    requestStageApprover               RequestStageApprover[]
    requestParticipant                 Request[]                 @relation("requestParticipant")
    requestRecruiter                   Request[]                 @relation("requestRecruiter")
    lastLogin                          DateTime?
    emailWhenRequestStageChanged       Boolean                   @default(true)
    emailWhenRequestCommentedOn        Boolean                   @default(true)
    emailWhenAwaitingMyRequestApproval Boolean                   @default(true)
    emailWhenRequestCreated            Boolean                   @default(true)
    exchangesParticipating             Exchange[]                @relation("exchangeParticipant")
    exchangesCreated                   Exchange[]                @relation("exchangeCreator")
    giftsRequested                     Gift[]                    @relation("giftRequestor")
    purchases                          Purchase[]                @relation("giftPurchaser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Department {
    id                      Int                       @id @default(autoincrement())
    name                    String                    @unique
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    departmentStageApprover DepartmentStageApprover[]
    participants            User[]                    @relation("departmentParticipant")
    recruiters              User[]                    @relation("departmentRecruiter")
    requests                Request[]

    @@index([name])
}

model Stage {
    id                      Int                       @id @default(autoincrement())
    name                    String                    @unique
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    departmentStageApprover DepartmentStageApprover[]
    workflows               StageInWorkflow[]
    request                 Request[]

    @@index([name])
}

model DepartmentStageApprover {
    id           Int        @id @default(autoincrement())
    deparmtent   Department @relation(fields: [departmentId], references: [id])
    stage        Stage      @relation(fields: [stageId], references: [id])
    approver     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    departmentId Int
    stageId      Int
    userId       String

    @@unique([stageId, departmentId, userId])
    @@index([stageId])
    @@index([departmentId])
    @@index([userId])
}

model Workflow {
    id           Int               @id @default(autoincrement())
    name         String            @unique
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    stages       StageInWorkflow[]
    requestTypes RequestType[]
}

model StageInWorkflow {
    id                   Int                    @id @default(autoincrement())
    order                Int
    workflow             Workflow               @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workflowId           Int
    stage                Stage                  @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId              Int
    requestStageApprover RequestStageApprover[]

    @@unique([workflowId, stageId])
    @@unique([workflowId, order])
    @@unique([workflowId, stageId, order])
    @@index([stageId])
}

model RequestField {
    id                        Int                         @id @default(autoincrement())
    name                      String                      @unique
    type                      String
    options                   RequestFieldOption[]
    createdAt                 DateTime                    @default(now())
    updatedAt                 DateTime                    @updatedAt
    requestFieldInRequestType RequestFieldInRequestType[]
    requestFieldInRequest     RequestFieldInRequest[]

    @@index([name])
}

model RequestFieldOption {
    id             Int           @id @default(autoincrement())
    name           String
    requestField   RequestField? @relation(fields: [requestFieldId], references: [id])
    requestFieldId Int?

    @@index([name])
    @@index([requestFieldId])
}

model RequestFieldInRequestType {
    id             Int          @id @default(autoincrement())
    order          Int
    requestType    RequestType  @relation(fields: [requestTypeId], references: [id])
    requestTypeId  Int
    requestField   RequestField @relation(fields: [requestFieldId], references: [id])
    requestFieldId Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@index([requestTypeId])
    @@index([requestFieldId])
}

model RequestType {
    id                        Int                         @id @default(autoincrement())
    name                      String                      @unique
    description               String?
    workflow                  Workflow                    @relation(fields: [workflowId], references: [id])
    workflowId                Int
    createdAt                 DateTime                    @default(now())
    updatedAt                 DateTime                    @updatedAt
    requestFieldInRequestType RequestFieldInRequestType[]
    Request                   Request[]

    @@index([name])
    @@index([workflowId])
}

model RequestFieldInRequest {
    id             Int          @id @default(autoincrement())
    request        Request      @relation(fields: [requestId], references: [id])
    requestId      Int
    requestField   RequestField @relation(fields: [requestFieldId], references: [id])
    requestFieldId Int
    value          String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@index([requestId])
    @@index([requestFieldId])
}

model RequestStatus {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Request   Request[]

    @@index([name])
}

model RequestComment {
    id        Int      @id @default(autoincrement())
    request   Request  @relation(fields: [requestId], references: [id])
    requestId Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    comment   String   @default("") @db.VarChar(1000)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([requestId])
    @@index([userId])
}

model RequestStageApprover {
    id        Int             @id @default(autoincrement())
    request   Request         @relation(fields: [requestId], references: [id])
    requestId Int
    user      User            @relation(fields: [userId], references: [id])
    userId    String
    stage     StageInWorkflow @relation(fields: [stageId], references: [id])
    stageId   Int
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    @@index([requestId])
    @@index([userId])
    @@index([stageId])
}

model Request {
    id               Int                     @id @default(autoincrement())
    department       Department              @relation(fields: [departmentId], references: [id])
    departmentId     Int
    requestType      RequestType             @relation(fields: [requestTypeId], references: [id])
    requestTypeId    Int
    createdAt        DateTime                @default(now())
    updatedAt        DateTime                @updatedAt
    fields           RequestFieldInRequest[]
    creator          User                    @relation("creator", fields: [creatorId], references: [id])
    creatorId        String
    status           RequestStatus           @relation(fields: [requestStatusId], references: [id])
    stage            Stage                   @relation(fields: [stageId], references: [id])
    stageId          Int
    currentApprovers User[]                  @relation("approver")
    stageApprovers   RequestStageApprover[]
    participants     User[]                  @relation("requestParticipant")
    recruiters       User[]                  @relation("requestRecruiter")
    comments         RequestComment[]
    requestStatusId  Int
    events           RequestEvent[]

    @@index([requestTypeId])
    @@index([creatorId])
    @@index([stageId])
    @@index([requestStatusId])
    @@index([departmentId])
}

model RequestEvent {
    id        Int      @id @default(autoincrement())
    request   Request  @relation(fields: [requestId], references: [id])
    requestId Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    action    String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([requestId])
    @@index([userId])
}

model Exchange {
    id           Int      @id @default(autoincrement())
    name         String
    description  String
    participants User[]   @relation("exchangeParticipant")
    creator      User     @relation("exchangeCreator", fields: [creatorId], references: [id])
    creatorId    String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    gifts        Gift[]

    @@index([creatorId])
}

model Gift {
    id          Int        @id @default(autoincrement())
    name        String
    description String
    image       String?    @default("") @db.VarChar(1000)
    url         String?    @default("") @db.VarChar(1000)
    price       Float?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    exchange    Exchange   @relation(fields: [exchangeId], references: [id])
    exchangeId  Int
    requestor   User       @relation("giftRequestor", fields: [requestorId], references: [id])
    requestorId String
    purchase    Purchase[]

    @@index([exchangeId])
    @@index([requestorId])
}

model Purchase {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    gift       Gift     @relation(fields: [giftId], references: [id])
    giftId     Int      @unique
    purchasers User[]   @relation("giftPurchaser")

    @@index([giftId])
}
